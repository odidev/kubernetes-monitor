build_image:
  machine:
    image: ubuntu-2004:202010-01
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - install_python_requests
    - run:
        name: Build image
        command: |
          docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
          export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
          IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
          ./scripts/docker/build-image.sh ${IMAGE_NAME_CANDIDATE}
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

build_and_upload_operator:
  docker:
    - image: circleci/python:3.9
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_remote_docker
    - install_python_requests
    - run:
        name: Download Operator SDK and Operator Package Manager
        command: |
          scripts/operator/download_operator_sdk.py
          scripts/operator/download_operator_package_manager.py
    - run:
        name: Create Operator and push Operator image to DockerHub
        command: |
          export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable")
          OPERATOR_TAG="${IMAGE_TAG}-${CIRCLE_SHA1}"
          MONITOR_TAG="${IMAGE_TAG}-${CIRCLE_SHA1}"
          scripts/operator/create_operator_and_push.py "${OPERATOR_TAG}" "${MONITOR_TAG}" "${DOCKERHUB_USER}" "${DOCKERHUB_PASSWORD}"
    - run:
        name: Package Operator Bundle
        command: |
          export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable")
          export SNYK_MONITOR_IMAGE_TAG="${IMAGE_TAG}-${CIRCLE_SHA1}"
          export SNYK_OPERATOR_VERSION="0.0.1-${CIRCLE_SHA1}"
          export SNYK_OPERATOR_IMAGE_TAG="${SNYK_MONITOR_IMAGE_TAG}"
          OPERATOR_PATH=$(scripts/operator/package_operator_bundle.py "${SNYK_OPERATOR_VERSION}" "${SNYK_OPERATOR_IMAGE_TAG}" "${SNYK_MONITOR_IMAGE_TAG}")
          echo "export OPERATOR_PATH=$OPERATOR_PATH" >> $BASH_ENV
    - run:
        name: Create Operator Bundle and Index and push to Docker Hub
        command: |
          export OPERATOR_DIR=$OPERATOR_PATH
          export PACKAGE_VERSION="0.0.1-${CIRCLE_SHA1}"
          scripts/operator/create_operator_bundle_and_index_and_push.py "${OPERATOR_DIR}" "${PACKAGE_VERSION}" "${DOCKERHUB_USER}" "${DOCKERHUB_PASSWORD}"
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

lint:
  machine:
    docker_layer_caching: true
    image: ubuntu-2004:202010-01
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        command: |
          npm run lint
        name: lint
    - run:
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        name: Notify Slack on failure
        when: on_fail
  working_directory: ~/kubernetes-monitor
code_formatter:
  machine:
    docker_layer_caching: true
    image: ubuntu-2004:202010-01
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        command: |
          npm run format:check
        name: code formatter check
    - run:
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        name: Notify Slack on failure
        when: on_fail
  working_directory: ~/kubernetes-monitor
unit_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Unit tests
        command: |
          npm run build &&
          npm run test:unit
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

system_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Install Skopeo
        command: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          . /etc/os-release
          sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x${NAME}_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
          wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x${NAME}_${VERSION_ID}/Release.key -O- | sudo apt-key add -
          sudo apt-get update -qq
          sudo apt-get install skopeo
    - run:
        name: System tests
        command: |
          npm run build &&
          npm run test:system
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

integration_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/kind
    - run:
        name: Integration tests
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/kind

integration_tests_helm:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Create temporary directory for logs
        command: mkdir -p /tmp/logs/test/integration/kind-helm
    - run:
        name: Integration tests with Helm deployment
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:helm
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/kind-helm

integration_tests_proxy:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Create temporary directory for logs
        command: mkdir -p /tmp/logs/test/integration/proxy
    - run:
        name: Integration tests with proxy
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:kind:proxy
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/proxy

eks_integration_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - install_python_requests
    - setup_node16
    - aws-cli/install:
        override-installed: true
    - run:
        name: Create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/eks
    - run:
        name: Integration tests EKS
        command: |
          npm install &&
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/eks

aks_integration_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - azure-cli/install
    - run:
        name: Create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/aks
    - run:
        name: Integration tests AKS
        command: |
          npm install &&
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:aks:yaml
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/aks

openshift3_integration_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: Create temporary directory for logs
        command: mkdir -p /tmp/logs/test/integration/openshift3
    - run:
        name: Integration tests OpenShift 3
        command: |
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          npm run test:integration:openshift3:yaml
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/openshift3

openshift4_integration_tests:
  machine:
    image: ubuntu-2004:202010-01
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_node16
    - install_python_requests
    - run:
        name: create temp dir for logs
        command: mkdir -p /tmp/logs/test/integration/openshift4
    - run:
        name: Integration tests OpenShift 4
        command: |
          export OPERATOR_VERSION="0.0.1-${CIRCLE_SHA1}"
          export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
          .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:openshift4:operator
    - run:
        name: Notify Slack on failure
        command: |
          ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
    - store_artifacts:
        path: /tmp/logs/test/integration/openshift4

######################## MERGE TO STAGING ########################
tag_and_push:
  docker:
    - image: cimg/node:16.5
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_remote_docker
    - install_python_requests
    - run:
        name: Tag and push
        command: |
          npm install &&
          docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
          unset CIRCLE_PULL_REQUEST &&
          unset CI_PULL_REQUEST &&
          unset CI_PULL_REQUESTS &&
          unset CIRCLE_PULL_REQUESTS &&
          npx semantic-release@17.2.2 &&
          NEW_VERSION=`cat ./package.json | jq -r '.version'` &&
          ./scripts/docker/approve-image.sh $NEW_VERSION
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

deploy_dev:
  docker:
    - image: cimg/node:16.5
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - install_python_requests
    - run:
        name: Deploy to dev
        command: |
          LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
          LATEST_TAG=${LATEST_TAG_WITH_V:1}-approved &&
          ./scripts/slack/notify_deploy.py $LATEST_TAG dev &&
          curl -s --fail --show-error -i -H "Accept: application/json" -H "Content-Type: application/json" \
              -X POST -d "{\"docker_sha\":\"${LATEST_TAG}\", \
                            \"commit_hash\":\"${CIRCLE_SHA1}\"}" \
              https://my.dev.snyk.io/${DEV_DEPLOY_TOKEN}
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

######################## MERGE TO MASTER ########################
publish:
  docker:
    - image: cimg/node:16.5
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - setup_remote_docker
    - install_python_requests
    - install_helm
    - run:
        name: Publish
        command: |
          LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
          LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
          IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved &&
          IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG} &&
          docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
          docker pull ${IMAGE_NAME_APPROVED} &&
          docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&
          docker push ${IMAGE_NAME_PUBLISHED} &&
          ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED} &&
          ./scripts/publish-gh-pages.sh ${LATEST_TAG}
          # Preserve the latest tag for the next steps of this job
          echo "export LATEST_TAG=${LATEST_TAG}" >> $BASH_ENV
    - run:
        name: Download operator-sdk
        command: |
          RELEASE_VERSION=v0.15.1
          DOWNLOAD_LOCATION=./operator-sdk
          CURL_FOLLOW_REDIRECTS="-L"
          curl ${CURL_FOLLOW_REDIRECTS} https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu -o ${DOWNLOAD_LOCATION}
          chmod +x ${DOWNLOAD_LOCATION}
    - run:
        name: Create Operator and push Operator image to DockerHub
        command: |
          OPERATOR_TAG="${LATEST_TAG}"
          MONITOR_TAG="${LATEST_TAG}"
          python3 scripts/operator/create_operator_and_push.py "${OPERATOR_TAG}" "${MONITOR_TAG}" "${DOCKERHUB_USER}" "${DOCKERHUB_PASSWORD}"
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail

deploy_prod:
  docker:
    - image: cimg/node:16.5
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_PASSWORD
  working_directory: ~/kubernetes-monitor
  steps:
    - checkout
    - install_python_requests
    - run:
        name: Deploy to prod
        command: |
          LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
          LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
          ./scripts/slack/notify_deploy.py $LATEST_TAG prod &&
          curl -s --fail --show-error -i -H "Accept: application/json" -H "Content-Type: application/json" \
              -X POST -d "{}" \
              https://my.prod.snyk.io/${PROD_DEPLOY_TOKEN}
    - run:
        name: Notify Slack on failure
        command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
        when: on_fail
